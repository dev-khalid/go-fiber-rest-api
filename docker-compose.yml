services:
  # Go Fiber API with hot reloading
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: go-fiber-api
    command: "air -c .air.toml"
    ports:
      - "${PORT}:8080"
    volumes:
      - .:/app
      - /app/tmp
    env_file:
      - .env
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - app-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    env_file:
      - .env
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Redis Insight
  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:5540"
    volumes:
      - redis_insight_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Zookeeper for Kafka
  fiber-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: fiber-zookeeper
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-broker
    depends_on:
      - fiber-zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    env_file:
      - .env
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped

  # Kafka UI (Alternative to Kafka Dashboard)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  redis_insight_data:
  kafka_data:

networks:
  app-network:
    driver: bridge
